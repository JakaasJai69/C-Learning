name: Build and Release through self hosted

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version name for the release (leave empty to use latest tag)'
        required: false
        type: string

jobs:
  release:
    runs-on: [self-hosted, linux, ARM64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up environment
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "Using latest tag"
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "VERSION=$LATEST_TAG" >> $GITHUB_ENV
          else
            echo "Using provided version"
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi

      - name: Create build directory
        run: mkdir build

      - name: Install dependencies
        run: echo 1 | sudo -S apt-get install -q -y build-essential clang cmake
      - name: Configure and Build
        working-directory: ${{github.workspace}}/build
        run: |
          # Add your build commands here
          echo "configuring project"
          cmake ..
          echo "Building program version ${{ env.VERSION }}"
          cmake --build .
          cpack
          mkdir out
          mv C-Learning--Linux.tar.gz out/C-Learning-debian12_aarch64_${{ env.VERSION }}.tar.gz
          mv src/C-Learning out/C-Learning-debian12_aarch64_${{ env.VERSION }}

      # - name: Release Build
      #   uses: softprops/action-gh-release@v2
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     draft: false
      #     generate_release_notes: true
      #     append_body: true
      #     body: "Let's see hmm.  *fingers crossed*"
      #     name: Test-Releases-${{ env.VERSION }}
      #     files: |
      #       build/out/*
      #
      - name: Archive source code
        run: git archive --format=zip HEAD -o source-code.zip

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (tar.gz)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/build/out/C-Learning-debian12_aarch64_${{ env.VERSION }}.tar.gz

          asset_name: C-Learning-debian12_aarch64_${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (executable)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/build/out/C-Learning-debian12_aarch64_${{ env.VERSION }}
          asset_name: C-Learning-debian12_aarch64_${{ env.VERSION }}
          asset_content_type: application/executable


      - name: Upload Source Code
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/source-code.zip
          asset_name: source-code-${{ env.VERSION }}.zip
          asset_content_type: application/zip